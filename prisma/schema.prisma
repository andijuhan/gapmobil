// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Car {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  published Boolean
  slug String @unique
  merek String @unique
  model_ String
  tahun Int
  harga Int
  jarakTempuh Int
  tipeRegistrasi String?
  transmisi String
  garansi Boolean
  bahanBakar String
  tanganKe Int
  tempatDuduk Int
  warna String
  tglReg DateTime
  masaBerlakuStnk DateTime
  statusOdo String
  images String[]
  deskripsi String
  createAt DateTime @default(now()) @map("create_At")
  updateAt DateTime @updatedAt @map("update_at")

  user User? @relation(fields: [username], references: [username])
  username String? @unique
  carBrand CarBrand @relation(fields: [merek], references: [brandName])

  @@map("cars")
}

model CarBrand {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  brandName String @unique

  carModel CarModel?
  car Car?

  @@map("car_brands")
}

model CarModel {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  modelName String @unique

  carBrand CarBrand @relation(fields: [carBrandName], references: [brandName])
  carBrandName String @unique

  @@map("car_models")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  role String
  username String @unique
  password String @unique
  token String?
  email String @unique
  phone String? @unique
  cars Car[]
  posts Post[]
  image String?
  createAt DateTime @default(now()) @map("create_At")
  updateAt DateTime @updatedAt @map("update_at")

  @@map("users")
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  slug String
  published Boolean
  title String
  content String
  image String
  createAt DateTime @default(now()) @map("create_At")
  updateAt DateTime @updatedAt @map("update_at")

  categories Category[] @relation(fields: [categoryIds], references: [id])
  categoryIds String[] @db.ObjectId
  user User? @relation(fields: [username], references: [username])
  username String? @unique

  @@map("posts")
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  posts Post[] @relation(fields: [postIds], references: [id])
  postIds String[] @db.ObjectId

  @@map("categories")
}